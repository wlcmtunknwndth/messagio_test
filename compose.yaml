services:
  backend:
    environment:
      - config_path=/msg/config.yaml
#    networks: ["srv"]
    env_file:
      - "auth.env"
    build:
      context: backend
      target: final
    ports:
      - "8888:8888"
    platform: linux/amd64
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      zookeeper:
        condition: service_started
  sso:
    environment:
      - config_path=/sso/config.yaml
    env_file:
      - "auth.env"
    platform: linux/amd64
#    networks: ["srv"]
    build:
      context: sso
      target: final
    ports:
      - "9999:9999"
    depends_on:
      postgres:
        condition: service_healthy

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  postgres:
    image: postgres
    restart: always
    volumes:
      - db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - PGUSER=postgres
    ports:
      - "5432:5432"
#    networks: ["srv"]

    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  srv:
    name: srv
volumes:
  db:
    driver: local
